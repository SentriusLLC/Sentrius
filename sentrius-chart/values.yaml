# General settings
replicaCount: 1
namespace: default

environment: "gke"  # Can be "gke", "aws", "azure", "local"

tenant: sentrius-demo
subdomain: "{{ .Values.tenant }}.sentrius.cloud"
keycloakSubdomain: keycloak.{{ .Values.subdomain }}
keycloakHostname: "{{ .Values.keycloakSubdomain }}"
keycloakDomain: https://{{ .Values.keycloakSubdomain }}
sentriusDomain: https://{{ .Values.subdomain }}


certificates:
  enabled: false  # Disable certs for local; enable for cloud
  issuer: "letsencrypt-prod"  # Change for cloud environments


# Sentrius configuration
sentrius:
  image:
    repository: us-central1-docker.pkg.dev/sentrius-project/sentrius-repo
    tag: tag
    pullPolicy: IfNotPresent
  port: 8080
  serviceType: ClusterIP
  ssh:
    port: 22
  env:
    SPRING_DATASOURCE_USERNAME: admin
    SPRING_DATASOURCE_PASSWORD: password
    KEYSTORE_PASSWORD: sentrius
  resources: {}
  oauth2:
    client_id: sentrius-api
    client_secret: nGkEukexSWTvDzYjSkDmeUlM0FJ5Jhh0
    authorization_grant_type: authorization_code
    redirect_uri: http://{{ .Values.subdomain }}/login/oauth2/code/keycloak
    scope: openid,profile,email
    issuer_uri: http://keycloak.{{ .Values.subdomain }}/realms/sentrius
  annotations:
    gke:
      cloud.google.com/backend-config: '{"default": "sentrius-backend-config"}'
    aws:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    azure:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"

sentriusagent:
  service:
    type: NodePort
    nodePort: 30083
  image:
    repository: sentrius-agent
    pullPolicy: IfNotPresent
  port: 8080
  oauth2:
    client_id: java-agents
    client_secret: e4WgJovH8MzcAvRnFg3rROAbeDIwiYmx
    authorization_grant_type: client_credentials
    redirect-uri: http://{{ .Values.subdomain }}/login/oauth2/code/keycloak
    scope: openid,profile,email
    issuer-uri: http://keycloak.{{ .Values.subdomain }}/realms/sentrius
  ssh:
    port: 22
  env:
    SPRING_DATASOURCE_USERNAME: admin
    SPRING_DATASOURCE_PASSWORD: password
    KEYSTORE_PASSWORD: sentrius
  resources: {}
  config:
    application: |
  annotations:
    gke:
      cloud.google.com/backend-config: '{"default": "sentrius-backend-config"}'
    aws:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    azure:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"

sentriusaiagent:
  service:
    type: NodePort
    nodePort: 30085
  image:
    repository: sentrius-ai-agent
    pullPolicy: IfNotPresent
  port: 8080
  oauth2:
    client_id: java-agents
    client_secret: KLJMLKSDJGlkj23@#jasdlkjg@#dsagsagdsag
    authorization_grant_type: authorization_code
    redirect-uri: http://{{ .Values.subdomain }}/login/oauth2/code/keycloak
    scope: openid,profile,email
    issuer-uri: http://keycloak.{{ .Values.subdomain }}/realms/sentrius
  ssh:
    port: 22
  env:
    SPRING_DATASOURCE_USERNAME: admin
    SPRING_DATASOURCE_PASSWORD: password
    KEYSTORE_PASSWORD: sentrius
  resources: {}
  config:
    application: |
  annotations:
    gke:
      cloud.google.com/backend-config: '{"default": "sentrius-backend-config"}'
    aws:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    azure:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      

# PostgreSQL configuration
postgres:
  image:
    repository: postgres
    tag: 15
  port: 5432
  storageSize: 10Gi
  env:
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    POSTGRES_DB: sentrius

ssh:
  image:
    repository: sentrius-ssh
    pullPolicy: IfNotPresent
  port: 22
  env:
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: password
    POSTGRES_DB: sentrius

# Secrets
secrets:
  db:
    username: YWRtaW4=       # admin
    password: cGFzc3dvcmQ=   # password
    keystorePassword: c2VudHJpdXM= # sentrius

keycloak:
  image:
    repository: sentrius-keycloak
    pullPolicy: IfNotPresent
  host: keycloak.default.svc.cluster.local
  adminUser: admin
  adminPassword: nGkEukexSWTvDzYjSkDmeUlM0FJ5Jhh0@1
  serviceType: ClusterIP
  port: 8081
  clientId: sentrius-api
  clientSecret: nGkEukexSWTvDzYjSkDmeUlM0FJ5Jhh0
  db:
    image: postgres:15
    user: keycloak
    password: password
    database: keycloak
    storageSize: 10Gi
  replicas: 1
  annotations:
    gke:
      cloud.google.com/backend-config: '{"default": "sentrius-backend-config"}'
    aws:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    azure:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"

ingress:
  enabled: true
  class: "nginx"  # Default for local; override for GKE/AWS
  tlsEnabled: true  # Enable TLS when supported
  annotations:
    gke:  # GKE-specific annotations
      kubernetes.io/ingress.class: gce
      networking.gke.io/managed-certificates: wildcard-cert
      kubernetes.io/ingress.allow-http: "false"
      ingress.kubernetes.io/force-ssl-redirect: "true"
    aws:  # AWS-specific annotations for ALB
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/ssl-redirect: "443"
    local:  # Local environment annotations (e.g., Minikube)
      kubernetes.io/ingress.class: nginx



healthCheck:
  enabled: true
  backendConfig:
    enabled: false  # Only enable for GKE
  readinessProbe:
    path: "/actuator/health"
    port: 8080
  livenessProbe:
    path: "/actuator/health"
    port: 8080
  keycloak:
    readinessPath: "/health/ready"
    livenessPath: "/health/live"
    port: 8081